// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kimbasn/printly/internal/repository (interfaces: PrintCenterRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/kimbasn/printly/internal/entity"
)

// MockPrintCenterRepository is a mock of PrintCenterRepository interface.
type MockPrintCenterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPrintCenterRepositoryMockRecorder
}

// MockPrintCenterRepositoryMockRecorder is the mock recorder for MockPrintCenterRepository.
type MockPrintCenterRepositoryMockRecorder struct {
	mock *MockPrintCenterRepository
}

// NewMockPrintCenterRepository creates a new mock instance.
func NewMockPrintCenterRepository(ctrl *gomock.Controller) *MockPrintCenterRepository {
	mock := &MockPrintCenterRepository{ctrl: ctrl}
	mock.recorder = &MockPrintCenterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrintCenterRepository) EXPECT() *MockPrintCenterRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPrintCenterRepository) Delete(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPrintCenterRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPrintCenterRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockPrintCenterRepository) FindAll() ([]entity.PrintCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.PrintCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPrintCenterRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPrintCenterRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPrintCenterRepository) FindByID(arg0 uint) (*entity.PrintCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*entity.PrintCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPrintCenterRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPrintCenterRepository)(nil).FindByID), arg0)
}

// FindByStatus mocks base method.
func (m *MockPrintCenterRepository) FindByStatus(arg0 entity.PrintCenterStatus) ([]entity.PrintCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", arg0)
	ret0, _ := ret[0].([]entity.PrintCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockPrintCenterRepositoryMockRecorder) FindByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockPrintCenterRepository)(nil).FindByStatus), arg0)
}

// Save mocks base method.
func (m *MockPrintCenterRepository) Save(arg0 *entity.PrintCenter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPrintCenterRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPrintCenterRepository)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockPrintCenterRepository) Update(arg0 uint, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPrintCenterRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPrintCenterRepository)(nil).Update), arg0, arg1)
}
