// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kimbasn/printly/internal/service (interfaces: OrderService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/kimbasn/printly/internal/dto"
	entity "github.com/kimbasn/printly/internal/entity"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CalculateOrderCost mocks base method.
func (m *MockOrderService) CalculateOrderCost(arg0 uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOrderCost", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateOrderCost indicates an expected call of CalculateOrderCost.
func (mr *MockOrderServiceMockRecorder) CalculateOrderCost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOrderCost", reflect.TypeOf((*MockOrderService)(nil).CalculateOrderCost), arg0)
}

// CancelOrder mocks base method.
func (m *MockOrderService) CancelOrder(arg0 uint, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderServiceMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderService)(nil).CancelOrder), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(arg0 string, arg1 uint, arg2 dto.CreateOrderRequest) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), arg0, arg1, arg2)
}

// DeleteOrder mocks base method.
func (m *MockOrderService) DeleteOrder(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceMockRecorder) DeleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderService)(nil).DeleteOrder), arg0)
}

// GetAllOrders mocks base method.
func (m *MockOrderService) GetAllOrders() ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderServiceMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderService)(nil).GetAllOrders))
}

// GetOrderByCode mocks base method.
func (m *MockOrderService) GetOrderByCode(arg0 string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByCode", arg0)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByCode indicates an expected call of GetOrderByCode.
func (mr *MockOrderServiceMockRecorder) GetOrderByCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByCode", reflect.TypeOf((*MockOrderService)(nil).GetOrderByCode), arg0)
}

// GetOrderByID mocks base method.
func (m *MockOrderService) GetOrderByID(arg0 uint) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderServiceMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderService)(nil).GetOrderByID), arg0)
}

// GetOrdersForCenter mocks base method.
func (m *MockOrderService) GetOrdersForCenter(arg0 uint) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForCenter", arg0)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForCenter indicates an expected call of GetOrdersForCenter.
func (mr *MockOrderServiceMockRecorder) GetOrdersForCenter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForCenter", reflect.TypeOf((*MockOrderService)(nil).GetOrdersForCenter), arg0)
}

// GetOrdersForUser mocks base method.
func (m *MockOrderService) GetOrdersForUser(arg0 string) ([]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForUser", arg0)
	ret0, _ := ret[0].([]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForUser indicates an expected call of GetOrdersForUser.
func (mr *MockOrderServiceMockRecorder) GetOrdersForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForUser", reflect.TypeOf((*MockOrderService)(nil).GetOrdersForUser), arg0)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderService) UpdateOrderStatus(arg0 uint, arg1 entity.OrderStatus, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderServiceMockRecorder) UpdateOrderStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderService)(nil).UpdateOrderStatus), arg0, arg1, arg2)
}
