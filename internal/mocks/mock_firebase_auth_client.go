// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kimbasn/printly/internal/adapter (interfaces: FirebaseAuthClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/v4/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockFirebaseAuthClient is a mock of FirebaseAuthClient interface.
type MockFirebaseAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseAuthClientMockRecorder
}

// MockFirebaseAuthClientMockRecorder is the mock recorder for MockFirebaseAuthClient.
type MockFirebaseAuthClientMockRecorder struct {
	mock *MockFirebaseAuthClient
}

// NewMockFirebaseAuthClient creates a new mock instance.
func NewMockFirebaseAuthClient(ctrl *gomock.Controller) *MockFirebaseAuthClient {
	mock := &MockFirebaseAuthClient{ctrl: ctrl}
	mock.recorder = &MockFirebaseAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseAuthClient) EXPECT() *MockFirebaseAuthClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockFirebaseAuthClient) CreateUser(arg0 context.Context, arg1 *auth.UserToCreate) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFirebaseAuthClientMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFirebaseAuthClient)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockFirebaseAuthClient) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockFirebaseAuthClientMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockFirebaseAuthClient)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockFirebaseAuthClient) GetUser(arg0 context.Context, arg1 string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFirebaseAuthClientMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFirebaseAuthClient)(nil).GetUser), arg0, arg1)
}
