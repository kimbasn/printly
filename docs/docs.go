// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Kimba SABI N'GOYE",
            "email": "kimbasabingoye@printly.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/centers/pending": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all print centers awaiting approval. Requires admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all pending print centers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.PrintCenter"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch pending centers",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/centers/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a print center. Requires admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a print center",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Print center deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "404": {
                        "description": "Print center not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete print center",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/centers/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approves, rejects, or suspends a print center. Requires admin role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update a print center's status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePrintCenterStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status updated",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Print center not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update status",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all orders across the platform. Requires admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all orders (admin)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Order"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch all orders",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a single order by its ID. Requires admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch order",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an order. Requires admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete an order (admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete order",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/users/{uid}/role": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets the role for a specific user. Requires admin privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update a user's role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role for the user",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or role",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update role",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/centers": {
            "get": {
                "description": "Retrieves a list of all approved print centers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Get all public print centers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.PrintCenter"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch print centers",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new print center, which will be pending approval. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Register a new print center",
                "parameters": [
                    {
                        "description": "Print Center to create",
                        "name": "center",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePrintCenterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.PrintCenter"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to register print center",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/centers/{id}": {
            "get": {
                "description": "Retrieves a single print center by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Get a print center by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PrintCenter"
                        }
                    },
                    "404": {
                        "description": "Print center not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch print center",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a print center's information. Requires owner or admin role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Update a print center's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Print Center data to update",
                        "name": "center",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePrintCenterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Print center updated",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Print center not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update print center",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/centers/{id}/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all orders for a specific print center. Requires manager or admin role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Get orders for a print center",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch orders",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new order with one or more documents and returns the created order. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Print Centers"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Print Center ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order creation request",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Print center not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create order",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/status/{code}": {
            "get": {
                "description": "Retrieves the status of an order using its public pickup code.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order status by pickup code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pickup Code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Order"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch order status",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}/status": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of an order. Requires manager or admin role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update an order's status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status updated",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update status",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch users",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Registers a new user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to register user",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get current user's profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Permanently deletes the account of the currently authenticated user from the system and Firebase.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete current user's account",
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete account",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the currently authenticated user to update their profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "description": "Profile data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{uid}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a single user by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by UID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch user",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user's profile information. Only email and phone number can be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a user by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Missing user UID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateOrderRequest": {
            "type": "object",
            "required": [
                "documents",
                "print_mode"
            ],
            "properties": {
                "documents": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.DocumentRequest"
                    }
                },
                "print_mode": {
                    "enum": [
                        "PRE_PRINT"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PrintMode"
                        }
                    ]
                }
            }
        },
        "dto.CreatePrintCenterRequest": {
            "type": "object",
            "required": [
                "address",
                "email",
                "geo_coordinates",
                "name",
                "phone_number",
                "working_hours"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/entity.Address"
                },
                "email": {
                    "type": "string"
                },
                "geo_coordinates": {
                    "$ref": "#/definitions/entity.GeoPoint"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "phone_number": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Service"
                    }
                },
                "working_hours": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/entity.WorkingHour"
                    }
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.DocumentRequest": {
            "type": "object",
            "required": [
                "file_name",
                "mime_type",
                "print_options",
                "size"
            ],
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "print_options": {
                    "$ref": "#/definitions/entity.PrintOptions"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "A description of the error"
                }
            }
        },
        "dto.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "dto.UpdateOrderStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "$ref": "#/definitions/entity.OrderStatus"
                }
            }
        },
        "dto.UpdatePrintCenterRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/entity.Address"
                },
                "geo_coordinates": {
                    "$ref": "#/definitions/entity.GeoPoint"
                },
                "name": {
                    "type": "string",
                    "minLength": 3
                },
                "phone_number": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/entity.Service"
                    }
                },
                "working_hours": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/entity.WorkingHour"
                    }
                }
            }
        },
        "dto.UpdatePrintCenterStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "enum": [
                        "pending",
                        "approved",
                        "rejected",
                        "suspended"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PrintCenterStatus"
                        }
                    ]
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateUserRoleRequest": {
            "type": "object",
            "required": [
                "role"
            ],
            "properties": {
                "role": {
                    "description": "The new role for the user. Must be 'user', 'manager', or 'admin'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Role"
                        }
                    ]
                }
            }
        },
        "entity.Address": {
            "type": "object",
            "required": [
                "city",
                "number",
                "street",
                "type"
            ],
            "properties": {
                "city": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "number": {
                    "type": "string"
                },
                "street": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.ColorMode": {
            "type": "string",
            "enum": [
                "COLOR",
                "BLACK_AND_WHITE"
            ],
            "x-enum-varnames": [
                "Color",
                "BlackAndWhite"
            ]
        },
        "entity.Document": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mime_type": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                },
                "print_options": {
                    "$ref": "#/definitions/entity.PrintOptions"
                },
                "printed_at": {
                    "description": "When it was printed (nullable)",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "storage_deleted_at": {
                    "description": "When it was deleted from GCS",
                    "type": "string"
                },
                "uploaded_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "entity.GeoPoint": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number",
                    "maximum": 90,
                    "minimum": -90
                },
                "lng": {
                    "type": "number",
                    "maximum": 180,
                    "minimum": -180
                }
            }
        },
        "entity.Order": {
            "type": "object",
            "properties": {
                "cancelled_at": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Document"
                    }
                },
                "id": {
                    "description": "gorm.Model is replaced to be explicit for swagger",
                    "type": "integer"
                },
                "paid_at": {
                    "type": "string"
                },
                "pickup_time": {
                    "type": "string"
                },
                "print_center_id": {
                    "type": "integer"
                },
                "print_mode": {
                    "$ref": "#/definitions/entity.PrintMode"
                },
                "status": {
                    "$ref": "#/definitions/entity.OrderStatus"
                },
                "user_uid": {
                    "type": "string"
                }
            }
        },
        "entity.OrderStatus": {
            "type": "string",
            "enum": [
                "CREATED",
                "AWAITING_DOCUMENT",
                "PENDING_PAYMENT",
                "PAID",
                "AWAITING_USER",
                "READY_TO_PRINT",
                "PRINTING",
                "PRINTED",
                "READY_FOR_PICKUP",
                "COMPLETED",
                "CANCELLED",
                "FAILED"
            ],
            "x-enum-varnames": [
                "StatusCreated",
                "StatusAwaitingDocument",
                "StatusPendingPayment",
                "StatusPaid",
                "StatusAwaitingUser",
                "StatusReadyToPrint",
                "StatusPrinting",
                "StatusPrinted",
                "StatusReadyForPickup",
                "StatusCompleted",
                "StatusCancelled",
                "StatusFailed"
            ]
        },
        "entity.PaperSize": {
            "type": "string",
            "enum": [
                "A4",
                "A3"
            ],
            "x-enum-varnames": [
                "A4",
                "A3"
            ]
        },
        "entity.PrintCenter": {
            "type": "object",
            "required": [
                "email",
                "name",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/entity.Address"
                },
                "created_at": {
                    "description": "Expose creation time",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "geo_coordinates": {
                    "$ref": "#/definitions/entity.GeoPoint"
                },
                "id": {
                    "description": "gorm.Model is replaced to be explicit for swagger",
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "owner_uid": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Service"
                    }
                },
                "status": {
                    "$ref": "#/definitions/entity.PrintCenterStatus"
                },
                "updated_at": {
                    "description": "Expose update time",
                    "type": "string"
                },
                "working_hours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.WorkingHour"
                    }
                }
            }
        },
        "entity.PrintCenterStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "rejected",
                "suspended"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusApproved",
                "StatusRejected",
                "StatusSuspended"
            ]
        },
        "entity.PrintMode": {
            "type": "string",
            "enum": [
                "PRE_PRINT",
                "PRINT_UPON_ARRIVAL"
            ],
            "x-enum-varnames": [
                "PrePrint",
                "PrintUponArrival"
            ]
        },
        "entity.PrintOptions": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "\"color\" | \"black_white\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.ColorMode"
                        }
                    ]
                },
                "copies": {
                    "type": "integer"
                },
                "pages": {
                    "description": "e.g., \"1-3,5\"",
                    "type": "string"
                },
                "paper_size": {
                    "description": "\"A4\", \"A3\", etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PaperSize"
                        }
                    ]
                }
            }
        },
        "entity.Role": {
            "type": "string",
            "enum": [
                "user",
                "manager",
                "admin"
            ],
            "x-enum-varnames": [
                "RoleUser",
                "RoleManager",
                "RoleAdmin"
            ]
        },
        "entity.Service": {
            "type": "object",
            "required": [
                "name",
                "paper_size"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "paper_size": {
                    "type": "string"
                },
                "price": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "center_id": {
                    "description": "Nullable: only for managers",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "role": {
                    "description": "\"user\", \"manager\", \"admin\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Role"
                        }
                    ]
                },
                "uid": {
                    "description": "Firebase UID (unique)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.Weekday": {
            "type": "string",
            "enum": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
            ],
            "x-enum-varnames": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
            ]
        },
        "entity.WorkingHour": {
            "type": "object",
            "required": [
                "day",
                "end",
                "start"
            ],
            "properties": {
                "day": {
                    "$ref": "#/definitions/entity.Weekday"
                },
                "end": {
                    "description": "Format: \"18:00\"",
                    "type": "string"
                },
                "start": {
                    "description": "Format: \"08:00\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and a JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Printly API",
	Description:      "API documentation for the Printly document printing platform.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
