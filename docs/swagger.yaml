basePath: /api/v1
definitions:
  dto.CreateOrderRequest:
    properties:
      documents:
        items:
          $ref: '#/definitions/dto.DocumentRequest'
        minItems: 1
        type: array
      print_mode:
        allOf:
        - $ref: '#/definitions/entity.PrintMode'
        enum:
        - PRE_PRINT
    required:
    - documents
    - print_mode
    type: object
  dto.CreatePrintCenterRequest:
    properties:
      email:
        type: string
      location:
        $ref: '#/definitions/entity.Location'
      name:
        minLength: 3
        type: string
      phone_number:
        type: string
      services:
        items:
          $ref: '#/definitions/entity.Service'
        type: array
      working_hours:
        items:
          $ref: '#/definitions/entity.WorkingHour'
        minItems: 1
        type: array
    required:
    - email
    - location
    - name
    - phone_number
    - working_hours
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      uid:
        type: string
    required:
    - phone_number
    - role
    - uid
    type: object
  dto.DocumentRequest:
    properties:
      file_name:
        type: string
      mime_type:
        type: string
      print_options:
        $ref: '#/definitions/entity.PrintOptions'
      size:
        type: integer
    required:
    - file_name
    - mime_type
    - print_options
    - size
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: A description of the error
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  dto.UpdateOrderStatusRequest:
    properties:
      status:
        $ref: '#/definitions/entity.OrderStatus'
    required:
    - status
    type: object
  dto.UpdatePrintCenterRequest:
    properties:
      location:
        $ref: '#/definitions/entity.Location'
      name:
        minLength: 3
        type: string
      phone_number:
        type: string
      services:
        items:
          $ref: '#/definitions/entity.Service'
        minItems: 1
        type: array
      working_hours:
        items:
          $ref: '#/definitions/entity.WorkingHour'
        minItems: 1
        type: array
    type: object
  dto.UpdatePrintCenterStatusRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/entity.PrintCenterStatus'
        enum:
        - pending
        - approved
        - rejected
        - suspended
    required:
    - status
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      phone_number:
        type: string
    type: object
  entity.ColorMode:
    enum:
    - COLOR
    - BLACK_AND_WHITE
    type: string
    x-enum-varnames:
    - Color
    - BlackAndWhite
  entity.Document:
    properties:
      file_name:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      order_id:
        type: integer
      print_options:
        $ref: '#/definitions/entity.PrintOptions'
      printed_at:
        description: When it was printed (nullable)
        type: string
      size:
        type: integer
      storage_deleted_at:
        description: When it was deleted from GCS
        type: string
      uploaded_at:
        type: string
      url:
        type: string
    type: object
  entity.GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  entity.Location:
    properties:
      city:
        type: string
      geo_point:
        $ref: '#/definitions/entity.GeoPoint'
      number:
        description: Postal address
        type: integer
      street:
        type: string
      type:
        description: e.g., "Rue", "Avenue"
        type: string
    type: object
  entity.Order:
    properties:
      cancelled_at:
        type: string
      code:
        type: string
      documents:
        items:
          $ref: '#/definitions/entity.Document'
        type: array
      id:
        description: gorm.Model is replaced to be explicit for swagger
        type: integer
      paid_at:
        type: string
      pickup_time:
        type: string
      print_center_id:
        type: integer
      print_mode:
        $ref: '#/definitions/entity.PrintMode'
      status:
        $ref: '#/definitions/entity.OrderStatus'
      user_uid:
        type: string
    type: object
  entity.OrderStatus:
    enum:
    - CREATED
    - AWAITING_DOCUMENT
    - PENDING_PAYMENT
    - PAID
    - AWAITING_USER
    - READY_TO_PRINT
    - PRINTING
    - PRINTED
    - READY_FOR_PICKUP
    - COMPLETED
    - CANCELLED
    - FAILED
    type: string
    x-enum-varnames:
    - StatusCreated
    - StatusAwaitingDocument
    - StatusPendingPayment
    - StatusPaid
    - StatusAwaitingUser
    - StatusReadyToPrint
    - StatusPrinting
    - StatusPrinted
    - StatusReadyForPickup
    - StatusCompleted
    - StatusCancelled
    - StatusFailed
  entity.PaperSize:
    enum:
    - A4
    - A3
    type: string
    x-enum-varnames:
    - A4
    - A3
  entity.PrintCenter:
    properties:
      email:
        type: string
      id:
        description: gorm.Model is replaced to be explicit for swagger
        type: integer
      location:
        $ref: '#/definitions/entity.Location'
      location_id:
        description: Internal FK
        type: integer
      name:
        type: string
      owner_uid:
        description: Firebase UID of the manager
        type: string
      phone_number:
        type: string
      services:
        items:
          $ref: '#/definitions/entity.Service'
        type: array
      status:
        $ref: '#/definitions/entity.PrintCenterStatus'
      working_hours:
        items:
          $ref: '#/definitions/entity.WorkingHour'
        type: array
    type: object
  entity.PrintCenterStatus:
    enum:
    - pending
    - approved
    - rejected
    - suspended
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusApproved
    - StatusRejected
    - StatusSuspended
  entity.PrintMode:
    enum:
    - PRE_PRINT
    - PRINT_UPON_ARRIVAL
    type: string
    x-enum-varnames:
    - PrePrint
    - PrintUponArrival
  entity.PrintOptions:
    properties:
      color:
        allOf:
        - $ref: '#/definitions/entity.ColorMode'
        description: '"color" | "black_white"'
      copies:
        type: integer
      pages:
        description: e.g., "1-3,5"
        type: string
      paper_size:
        allOf:
        - $ref: '#/definitions/entity.PaperSize'
        description: '"A4", "A3", etc.'
    type: object
  entity.Role:
    enum:
    - user
    - manager
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleManager
    - RoleAdmin
  entity.Service:
    properties:
      description:
        type: string
      name:
        description: e.g., "printing"
        type: string
      paper_size:
        description: e.g., "A4"
        type: string
      price:
        type: number
    type: object
  entity.User:
    properties:
      center_id:
        description: 'Nullable: only for managers'
        type: integer
      created_at:
        type: string
      email:
        description: Optional for anonymous
        type: string
      phone_number:
        description: Required for Mobile Money and contact
        type: string
      role:
        allOf:
        - $ref: '#/definitions/entity.Role'
        description: '"user", "manager", "admin"'
      uid:
        description: Firebase UID (unique)
        type: string
      updated_at:
        type: string
    type: object
  entity.WorkingHour:
    properties:
      day:
        description: e.g., "Monday"
        type: string
      end:
        description: 'Format: "08:00"'
        type: string
      start:
        description: 'Format: "08:00"'
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: kimbasabingoye@printly.com
    name: Kimba SABI N'GOYE
  description: API documentation for the Printly document printing platform.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Printly API
  version: "1.0"
paths:
  /admin/centers/{id}:
    delete:
      description: Deletes a print center. Requires admin role.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Print center deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "404":
          description: Print center not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete print center
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a print center
      tags:
      - Admin
  /admin/centers/{id}/status:
    patch:
      consumes:
      - application/json
      description: Approves, rejects, or suspends a print center. Requires admin role.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePrintCenterStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Print center not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update status
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a print center's status
      tags:
      - Admin
  /admin/centers/pending:
    get:
      description: Retrieves a list of all print centers awaiting approval. Requires
        admin role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.PrintCenter'
            type: array
        "500":
          description: Failed to fetch pending centers
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all pending print centers
      tags:
      - Admin
  /admin/orders:
    get:
      description: Retrieves a list of all orders across the platform. Requires admin
        role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Order'
            type: array
        "500":
          description: Failed to fetch all orders
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders (admin)
      tags:
      - Admin
  /admin/orders/{id}:
    delete:
      description: Deletes an order. Requires admin role.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete order
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order (admin)
      tags:
      - Admin
    get:
      description: Retrieves a single order by its ID. Requires admin role.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Order'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch order
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - Admin
  /centers:
    get:
      description: Retrieves a list of all approved print centers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.PrintCenter'
            type: array
        "500":
          description: Failed to fetch print centers
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all public print centers
      tags:
      - Print Centers
    post:
      consumes:
      - application/json
      description: Registers a new print center, which will be pending approval. Requires
        authentication.
      parameters:
      - description: Print Center to create
        in: body
        name: center
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePrintCenterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.PrintCenter'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to register print center
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new print center
      tags:
      - Print Centers
  /centers/{id}:
    get:
      description: Retrieves a single print center by its ID.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PrintCenter'
        "404":
          description: Print center not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch print center
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a print center by ID
      tags:
      - Print Centers
    put:
      consumes:
      - application/json
      description: Updates a print center's information. Requires owner or admin role.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      - description: Print Center data to update
        in: body
        name: center
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePrintCenterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Print center updated
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Print center not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update print center
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a print center's profile
      tags:
      - Print Centers
  /centers/{id}/orders:
    get:
      description: Retrieves all orders for a specific print center. Requires manager
        or admin role.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Order'
            type: array
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch orders
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get orders for a print center
      tags:
      - Print Centers
    post:
      consumes:
      - application/json
      description: Creates a new order with one or more documents and returns the
        created order. Requires authentication.
      parameters:
      - description: Print Center ID
        in: path
        name: id
        required: true
        type: string
      - description: Order creation request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Order'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Print center not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to create order
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Print Centers
  /orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of an order. Requires manager or admin role.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Status updated
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update status
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order's status
      tags:
      - Orders
  /orders/status/{code}:
    get:
      description: Retrieves the status of an order using its public pickup code.
      parameters:
      - description: Pickup Code
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Order'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch order status
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get order status by pickup code
      tags:
      - Orders
  /users:
    get:
      description: Retrieves a list of all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Registers a new user in the system.
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{uid}:
    delete:
      description: Deletes a user by their unique identifier.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Missing user UID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves a single user by their unique identifier.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by UID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates a user's profile information. Only email and phone number
        can be updated.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user's profile
      tags:
      - Users
  /users/me:
    delete:
      description: Permanently deletes the account of the currently authenticated
        user from the system and Firebase.
      produces:
      - application/json
      responses:
        "200":
          description: Account deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete account
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete current user's account
      tags:
      - Users
    get:
      description: Retrieves the profile of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user's profile
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Allows the currently authenticated user to update their profile
        information.
      parameters:
      - description: Profile data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user's profile
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and a JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
