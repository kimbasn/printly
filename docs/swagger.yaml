basePath: /api/v1
definitions:
  dto.CreateUserRequest:
    properties:
      center_id:
        type: integer
      email:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      uid:
        type: string
    required:
    - phone_number
    - role
    - uid
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: A description of the error
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      center_id:
        type: integer
      email:
        type: string
      phone_number:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
    type: object
  entity.Role:
    enum:
    - user
    - manager
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleManager
    - RoleAdmin
  entity.User:
    properties:
      center_id:
        description: 'Nullable: only for managers'
        type: integer
      created_at:
        type: string
      email:
        description: Optional for anonymous
        type: string
      phone_number:
        description: Required for Mobile Money and contact
        type: string
      role:
        allOf:
        - $ref: '#/definitions/entity.Role'
        description: '"user", "manager", "admin"'
      uid:
        description: Firebase UID (unique)
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: kimbasabingoye@printly.com
    name: Kimba SABI N'GOYE
  description: API documentation for the Printly document printing platform.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Printly API
  version: "1.0"
paths:
  /users:
    get:
      description: Retrieves a list of all users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Registers a new user in the system.
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{uid}:
    delete:
      description: Deletes a user by their unique identifier.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Missing user UID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieves a single user by their unique identifier.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to fetch user
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get a user by UID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates a user's profile information. Only email and phone number
        can be updated.
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a user's profile
      tags:
      - Users
swagger: "2.0"
